[{"C:\\Users\\grego\\source\\repos\\react-app\\src\\index.js":"1","C:\\Users\\grego\\source\\repos\\react-app\\src\\App.js":"2","C:\\Users\\grego\\source\\repos\\react-app\\src\\reportWebVitals.js":"3","C:\\Users\\grego\\source\\repos\\react-app\\src\\components\\DCandidateForm.js":"4","C:\\Users\\grego\\source\\repos\\react-app\\src\\actions\\store.js":"5","C:\\Users\\grego\\source\\repos\\react-app\\src\\reducers\\index.js":"6","C:\\Users\\grego\\source\\repos\\react-app\\src\\reducers\\dCandidate.js":"7","C:\\Users\\grego\\source\\repos\\react-app\\src\\actions\\dCandidate.js":"8","C:\\Users\\grego\\source\\repos\\react-app\\src\\actions\\api.js":"9","C:\\Users\\grego\\source\\repos\\react-app\\src\\components\\DCandidates.js":"10","C:\\Users\\grego\\source\\repos\\react-app\\src\\components\\useForm.js":"11"},{"size":500,"mtime":1606255101775,"results":"12","hashOfConfig":"13"},{"size":537,"mtime":1608694268341,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1606255101775,"results":"15","hashOfConfig":"13"},{"size":7144,"mtime":1608751765492,"results":"16","hashOfConfig":"13"},{"size":341,"mtime":1608599698544,"results":"17","hashOfConfig":"13"},{"size":149,"mtime":1608596924357,"results":"18","hashOfConfig":"13"},{"size":913,"mtime":1608679012017,"results":"19","hashOfConfig":"13"},{"size":1635,"mtime":1608750098094,"results":"20","hashOfConfig":"13"},{"size":477,"mtime":1608596781411,"results":"21","hashOfConfig":"13"},{"size":3817,"mtime":1608745349933,"results":"22","hashOfConfig":"13"},{"size":812,"mtime":1608693738392,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1tfea92",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"26"},"C:\\Users\\grego\\source\\repos\\react-app\\src\\index.js",[],["52","53"],"C:\\Users\\grego\\source\\repos\\react-app\\src\\App.js",["54"],"import logo from './logo.svg';\nimport './App.css';\nimport { store } from \"./actions/store\";\nimport { Provider } from \"react-redux\";\nimport DCandidates from './components/DCandidates';\nimport { Container } from \"@material-ui/core\";\nimport { ToastProvider } from \"react-toast-notifications\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ToastProvider autoDismiss={true}>\n        <Container maxWidth=\"lg\">\n          <DCandidates />\n        </Container>\n      </ToastProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","C:\\Users\\grego\\source\\repos\\react-app\\src\\reportWebVitals.js",[],"C:\\Users\\grego\\source\\repos\\react-app\\src\\components\\DCandidateForm.js",["55","56","57","58","59","60","61"],"import { Grid, TextField, withStyles, FormControl, InputLabel, Select, MenuItem, Button, FormHelperText } from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport useForm from \"./useForm\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/dCandidate\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MultiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            minWidth: 230,\r\n        }\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 230,\r\n    },\r\n    smMargin: {\r\n        margin: theme.spacing(1),\r\n    }\r\n})\r\n\r\nconst initialFieldValues = {\r\n    fullName: '',\r\n    mobile: '',\r\n    email: '',\r\n    age: '',\r\n    bloodGroup: '',\r\n    address: ''\r\n}\r\n\r\nconst DCandidateForm = ({ classes, ...props }) => {\r\n\r\n    //toast msg\r\n    const { addToast } = useToasts()\r\n\r\n    //validate()\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('fullName' in fieldValues)\r\n            temp.fullName = fieldValues.fullName ? \"\" : \"this field is required.\"\r\n        if ('mobile' in fieldValues)\r\n            temp.mobile = fieldValues.mobile ? \"\" : \"this field is required.\"\r\n        if ('bloodGroup' in fieldValues)\r\n            temp.bloodGroup = fieldValues.bloodGroup ? \"\" : \"this field is required.\"\r\n        if ('email' in fieldValues)\r\n            temp.email = (/^$|.+@.+..+/).test(fieldValues.email) ? \"\" : \"Email is not valid.\"\r\n        setErrors({\r\n            ...temp\r\n        })\r\n\r\n        if (fieldValues == values)\r\n            return Object.values(temp).every(x => x == \"\")\r\n    }\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    } = useForm(initialFieldValues, validate, props.setCurrentId)\r\n\r\n    //material ui select code\r\n    const inputLabel = React.useRef(null);\r\n    const [labelWidth, setLabelWidth] = React.useState(0);\r\n    React.useEffect(() => {\r\n        setLabelWidth(inputLabel.current.offsetWidth);\r\n    }, []);\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        if (validate()) {\r\n            const onSuccess = () => {\r\n                resetForm()\r\n                addToast(\"Submitted Successfully\", { appearance: 'success' })\r\n            }\r\n            if (props.currentId == 0)\r\n                props.createDCandidate(values, onSuccess)\r\n            else\r\n                props.updateDcandidate(props.currentId, values, onSuccess)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.currentId != 0) {\r\n            setValues({\r\n                ...props.dCandidateList.find(x => x.id == props.currentId)\r\n            })\r\n            setErrors({})\r\n        }\r\n\r\n    }, [props.currentId])\r\n\r\n\r\n    return (\r\n        <form autoComplete=\"off\" noValidate className={classes.root} onSubmit={handleSubmit}>\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n                    <TextField\r\n                        name=\"fullName\"\r\n                        variant=\"outlined\"\r\n                        label=\"Full Name\"\r\n                        value={values.fullName}\r\n                        onChange={handleInputChange}\r\n                        {...(errors.fullName && { error: true, helperText: errors.fullName })}\r\n                    />\r\n                    <TextField\r\n                        name=\"email\"\r\n                        variant=\"outlined\"\r\n                        label=\"Email\"\r\n                        value={values.email}\r\n                        onChange={handleInputChange}\r\n                        {...(errors.email && { error: true, helperText: errors.email })}\r\n                    />\r\n                    <FormControl variant=\"outlined\"\r\n                        className={classes.formControl}\r\n                        {...(errors.bloodGroup && { error: true })}\r\n                    >\r\n                        <InputLabel ref={inputLabel}>Blood Group</InputLabel>\r\n                        <Select\r\n                            name=\"bloodGroup\"\r\n                            value={values.bloodGroup}\r\n                            onChange={handleInputChange}\r\n                            labelWidth={labelWidth}\r\n                        >\r\n                            <MenuItem value=\"\">Select Blood Group</MenuItem>\r\n                            <MenuItem value=\"A+\">A +ve</MenuItem>\r\n                            <MenuItem value=\"A-\">A -ve</MenuItem>\r\n                            <MenuItem value=\"B+\">B +ve</MenuItem>\r\n                            <MenuItem value=\"B-\">B -ve</MenuItem>\r\n                            <MenuItem value=\"AB+\">AB +ve</MenuItem>\r\n                            <MenuItem value=\"AB-\">AB -ve</MenuItem>\r\n                            <MenuItem value=\"O+\">O +ve</MenuItem>\r\n                            <MenuItem value=\"O-\">O -ve</MenuItem>\r\n                        </Select>\r\n                        {errors.bloodGroup && <FormHelperText>{errors.bloodGroup}</FormHelperText>}\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n\r\n                    <TextField\r\n                        name=\"mobile\"\r\n                        variant=\"outlined\"\r\n                        label=\"Mobile\"\r\n                        value={values.mobile}\r\n                        onChange={handleInputChange}\r\n                        {...(errors.mobile && { error: true, helperText: errors.mobile })}\r\n                    />\r\n                    <TextField\r\n                        name=\"age\"\r\n                        variant=\"outlined\"\r\n                        label=\"Age\"\r\n                        value={values.age}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <TextField\r\n                        name=\"address\"\r\n                        variant=\"outlined\"\r\n                        label=\"Address\"\r\n                        value={values.address}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <div>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            type=\"submit\"\r\n                            className={classes.smMargin}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            className={classes.smMargin}\r\n                            onClick={resetForm}\r\n                        >\r\n                            Reset\r\n                        </Button>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    dCandidateList: state.dCandidate.list\r\n})\r\n\r\nconst mapActionToProps = {\r\n    createDCandidate: actions.create,\r\n    updateDcandidate: actions.update,\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(DCandidateForm));","C:\\Users\\grego\\source\\repos\\react-app\\src\\actions\\store.js",[],"C:\\Users\\grego\\source\\repos\\react-app\\src\\reducers\\index.js",[],"C:\\Users\\grego\\source\\repos\\react-app\\src\\reducers\\dCandidate.js",[],"C:\\Users\\grego\\source\\repos\\react-app\\src\\actions\\dCandidate.js",[],"C:\\Users\\grego\\source\\repos\\react-app\\src\\actions\\api.js",["62"],"import axios from \"axios\";\r\n\r\nconst baseUrl = \"http://localhost:65486/api/\"\r\n\r\n\r\n\r\nexport default {\r\n\r\n    dCandidate(url = baseUrl + 'dcandidate/') {\r\n        return {\r\n            fetchAll: () => axios.get(url),\r\n            fetchById: id => axios.get(url + id),\r\n            create: newRecord => axios.post(url, newRecord),\r\n            update: (id, updateRecord) => axios.put(url + id, updateRecord),\r\n            delete: id => axios.delete(url + id)\r\n\r\n        }\r\n    }\r\n}","C:\\Users\\grego\\source\\repos\\react-app\\src\\components\\DCandidates.js",["63"],"import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/dCandidate\";\r\nimport { Grid, Paper, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, withStyles, ButtonGroup, Button } from \"@material-ui/core\";\r\nimport DCandidateForm from \"./DCandidateForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        \"& .MuiTableCell-head\": {\r\n            fontsize: \"1.25rem\"\r\n        }\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(2),\r\n        padding: theme.spacing(2)\r\n    }\r\n})\r\n\r\n\r\n\r\nconst DCandidates = ({ classes, ...props }) => {\r\n    const [currentId, setCurrentId] = useState(0)\r\n\r\n    useEffect(() => {\r\n        props.fetchAllDCandidates()\r\n    }, [])\r\n    //toast msg\r\n    const { addToast } = useToasts()\r\n\r\n\r\n\r\n    const onDelete = id => {\r\n        if (window.confirm('Are you sure you would like to delete this record?'))\r\n            props.deleteDCandidate(id, () => addToast(\"Deleted succesfully\", { appearance: 'info' }))\r\n    }\r\n\r\n    return (\r\n\r\n        <Paper className={classes.paper} elevation={3}>\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n                    <DCandidateForm {...({ currentId, setCurrentId })} />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TableContainer>\r\n                        <Table>\r\n                            <TableHead className={classes.root}>\r\n                                <TableRow>\r\n                                    <TableCell>Name</TableCell>\r\n                                    <TableCell>Mobile</TableCell>\r\n                                    <TableCell>Blood Group</TableCell>\r\n                                    <TableCell></TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    props.dCandidateList.map((record, index) => {\r\n                                        return (<TableRow key={index} hover>\r\n                                            <TableCell>{record.fullName}</TableCell>\r\n                                            <TableCell>{record.mobile}</TableCell>\r\n                                            <TableCell>{record.bloodGroup}</TableCell>\r\n                                            <TableCell>\r\n                                                <ButtonGroup variant=\"text\">\r\n                                                    <Button><EditIcon color=\"primary\"\r\n                                                        onClick={() => { setCurrentId(record.id) }} /></Button>\r\n                                                    <Button><DeleteIcon color=\"secondary\"\r\n                                                        onClick={() => onDelete(record.id)}\r\n                                                    /></Button>\r\n                                                </ButtonGroup>\r\n                                            </TableCell>\r\n                                        </TableRow>)\r\n                                    })\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    dCandidateList: state.dCandidate.list\r\n})\r\n\r\nconst mapActionToProps = {\r\n    fetchAllDCandidates: actions.fetchAll,\r\n    deleteDCandidate: actions.Delete\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(DCandidates));\r\n","C:\\Users\\grego\\source\\repos\\react-app\\src\\components\\useForm.js",["64","65"],"import React, { useState, useEffect } from \"react\";\r\n\r\nconst useForm = (initialFieldValues, validate, setCurrentId) => {\r\n    const [values, setValues] = useState(initialFieldValues)\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const handleInputChange = e => {\r\n        const { name, value } = e.target\r\n        const fieldValue = { [name]: value }\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        })\r\n        validate(fieldValue)\r\n    }\r\n\r\n\r\n    const resetForm = () => {\r\n        setValues({\r\n            ...initialFieldValues\r\n        })\r\n        setErrors({})\r\n        setCurrentId(0)\r\n\r\n    }\r\n\r\n    return {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    };\r\n}\r\n\r\nexport default useForm;",{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":1,"column":8,"nodeType":"72","messageId":"73","endLine":1,"endColumn":12},{"ruleId":"70","severity":1,"message":"74","line":2,"column":17,"nodeType":"72","messageId":"73","endLine":2,"endColumn":25},{"ruleId":"75","severity":1,"message":"76","line":54,"column":25,"nodeType":"77","messageId":"78","endLine":54,"endColumn":27},{"ruleId":"75","severity":1,"message":"76","line":55,"column":53,"nodeType":"77","messageId":"78","endLine":55,"endColumn":55},{"ruleId":"75","severity":1,"message":"76","line":81,"column":33,"nodeType":"77","messageId":"78","endLine":81,"endColumn":35},{"ruleId":"75","severity":1,"message":"79","line":89,"column":29,"nodeType":"77","messageId":"78","endLine":89,"endColumn":31},{"ruleId":"75","severity":1,"message":"76","line":91,"column":56,"nodeType":"77","messageId":"78","endLine":91,"endColumn":58},{"ruleId":"80","severity":1,"message":"81","line":96,"column":8,"nodeType":"82","endLine":96,"endColumn":25,"suggestions":"83"},{"ruleId":"84","severity":1,"message":"85","line":7,"column":1,"nodeType":"86","endLine":19,"endColumn":2},{"ruleId":"80","severity":1,"message":"87","line":30,"column":8,"nodeType":"82","endLine":30,"endColumn":10,"suggestions":"88"},{"ruleId":"70","severity":1,"message":"89","line":1,"column":8,"nodeType":"72","messageId":"73","endLine":1,"endColumn":13},{"ruleId":"70","severity":1,"message":"90","line":1,"column":27,"nodeType":"72","messageId":"73","endLine":1,"endColumn":36},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.dCandidateList', 'setErrors', and 'setValues'. Either include them or remove the dependency array.","ArrayExpression",["93"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["94"],"'React' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},"Update the dependencies array to be: [props.currentId, props.dCandidateList, setErrors, setValues]",{"range":"99","text":"100"},"Update the dependencies array to be: [props]",{"range":"101","text":"102"},[2826,2843],"[props.currentId, props.dCandidateList, setErrors, setValues]",[902,904],"[props]"]